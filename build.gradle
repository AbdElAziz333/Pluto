buildscript {
    repositories {
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }

    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'java'
}

apply plugin: 'org.spongepowered.mixin'

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

group = project.maven_group
version = project.mod_version

java {
    archivesBaseName = project.archives_base_name
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

configurations {
    library
    shade
    implementation.extendsFrom library
    shade.extendsFrom library
}

minecraft {
    mappings channel: 'official', version: project.minecraft_version

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'pluto'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"

            mods {
                pluto {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'pluto'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"

            mods {
                pluto {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "pluto.refmap.json"

    config "pluto.mixins.json"
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

minecraft.runs.all {
    lazyToken('minecraft_classpath') {
        configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
    }
}

repositories {
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    maven {
        url "https://papermc.io/repo/repository/maven-public/"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.forge_version}"

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    implementation fg.deobf("curse.maven:ferritecore-429235:4117906") //Ferritecore
    implementation fg.deobf("curse.maven:fastload-630620:4074712") //Fastload
    implementation fg.deobf("curse.maven:lazy-dfu-forge-460819:3831644") //Lazy DFU

    library "com.velocitypowered:velocity-native:3.1.2-SNAPSHOT"
    shade "com.velocitypowered:velocity-native:3.1.2-SNAPSHOT"
}

reobf {
    shadowJar {}
}

shadowJar {
    configurations = [project.configurations.shade]
    from sourceSets.main.allSource
    exclude('io/netty/**')
    exclude('com/google/**')
    exclude('javax/annotation/**')
    exclude('org/**')
    exclude('META-INF/services/**')
    exclude('linux_aarch64/**')
    exclude('linux_x86_64/**')
    exclude('macos_arm64/**')
    classifier ''

    minimize()
}

tasks.build.dependsOn reobfShadowJar
shadowJar.dependsOn('classes')
jar.finalizedBy('reobfJar')

artifacts {
    archives jar, shadowJar
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : project.mod_id,
                "Specification-Vendor"    : project.mod_author,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : project.mod_author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "${mod_id}.mixins.json"
        ])
    }
}

task packageSources(type: ShadowJar, dependsOn: 'classes') {
    configurations = [project.configurations.shade]
    from sourceSets.main.allSource
    exclude('io/netty/**')
    exclude('com/google/**')
    exclude('javax/annotation/**')
    exclude('org/**')
    exclude('META-INF/services/**')
    exclude('linux_aarch64/**')
    exclude('linux_x86_64/**')
    exclude('macos_arm64/**')
    classifier = 'sources'
}

artifacts {
    archives shadowJar
    archives packageSources
}

afterEvaluate {
    shadowJar.dependsOn(packageSources)
    shadowJar.dependsOn('classes')
}

shadowJar.finalizedBy(reobfShadowJar)
jar.finalizedBy(packageSources)

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}