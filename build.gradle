buildscript {
    repositories {
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url = 'https://plugins.gradle.org/m2/' }
        gradlePluginPortal()
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        classpath 'gradle.plugin.com.github.jengelman.gradle.plugins:shadow:7.0.0'
    }
}

plugins {
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id 'java'
}

apply plugin: 'org.spongepowered.mixin'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'
apply plugin: 'maven-publish'

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

group = 'com.abdelaziz.pluto'
version = '0.0.2'
archivesBaseName = 'pluto-mc1.19.2'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
//java {}

configurations {
    library
    shade
    implementation.extendsFrom library
    shade.extendsFrom library
}

minecraft {
    mappings channel: 'official', version: '1.19.2'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'pluto'

            mods {
                pluto {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'pluto'

            mods {
                pluto {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'pluto'

            mods {
                pluto {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'pluto', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                pluto {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "pluto.refmap.json"

    config "pluto.mixins.json"
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    maven {
        name 'papermc'
        url 'https://repo.papermc.io/repository/maven-public/'
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.19.2-43.1.39'

    library 'com.velocitypowered:velocity-native:3.1.2-SNAPSHOT'// { transitive = false }
    shade 'com.velocitypowered:velocity-native:3.1.2-SNAPSHOT'

    runtimeOnly fg.deobf("curse.maven:canary-665658:4024511")
    runtimeOnly fg.deobf("curse.maven:saturn-670986:3981973")
    runtimeOnly fg.deobf("curse.maven:smooth-boot-reloaded-633412:4028205")
    runtimeOnly fg.deobf("curse.maven:lazy-dfu-forge-460819:3831644")
    runtimeOnly fg.deobf("curse.maven:ferritecore-429235:3875371")
    runtimeOnly fg.deobf("curse.maven:fastload-630620:4026324")
    runtimeOnly fg.deobf("curse.maven:starlight-forge-526854:3836016")

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

shadowJar {
    configurations = [project.configurations.shade]
    from sourceSets.main.allSource
    exclude('META-INF/services/**')
    relocate 'com.velocitypowered', 'com.abdelaziz.velocity'
    classifier ''
}

reobf {
    shadowJar {}
}

tasks.build.dependsOn reobfShadowJar
publish.dependsOn('reobfJar')
shadowJar.dependsOn('classes')
jar.finalizedBy('reobfJar')

jar {
    manifest {
        attributes([
                "Specification-Title"     : "pluto",
                "Specification-Vendor"    : "AbdElAziz",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "AbdElAziz",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task packageSources(type: ShadowJar, dependsOn: 'classes') {
    configurations = [project.configurations.shade]
    from sourceSets.main.allSource
    exclude('META-INF/**')
    relocate 'com.velocitypowered', 'com.abdelaziz.velocity'
    classifier = 'sources'
}

artifacts {
    archives shadowJar
    archives packageSources
}

afterEvaluate {
    publish.dependsOn('reobfShadowJar')
    publish.dependsOn('reobfJar')
    publish.dependsOn('packageSources')
    shadowJar.dependsOn(packageSources)
    shadowJar.dependsOn('classes')
}

shadowJar.finalizedBy(reobfShadowJar)
jar.finalizedBy(packageSources)

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact shadowJar
            artifact packageSources
            artifactId = project.archivesBaseName
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}